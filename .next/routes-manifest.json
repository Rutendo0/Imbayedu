{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/api/artists/[id]",
      "regex": "^/api/artists/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/artists/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/artists/[id]/artworks",
      "regex": "^/api/artists/([^/]+?)/artworks(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/artists/(?<nxtPid>[^/]+?)/artworks(?:/)?$"
    },
    {
      "page": "/api/artworks/[id]",
      "regex": "^/api/artworks/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/artworks/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/cart/[id]",
      "regex": "^/api/cart/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/cart/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/collections/[id]",
      "regex": "^/api/collections/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/collections/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/artists/[id]",
      "regex": "^/artists/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/artists/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/artworks/[id]",
      "regex": "^/artworks/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/artworks/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/exhibition/[id]",
      "regex": "^/exhibition/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/exhibition/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/furniture/[id]",
      "regex": "^/furniture/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/furniture/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/about",
      "regex": "^/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about(?:/)?$"
    },
    {
      "page": "/artists",
      "regex": "^/artists(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/artists(?:/)?$"
    },
    {
      "page": "/artworks",
      "regex": "^/artworks(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/artworks(?:/)?$"
    },
    {
      "page": "/cart",
      "regex": "^/cart(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/cart(?:/)?$"
    },
    {
      "page": "/checkout",
      "regex": "^/checkout(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/checkout(?:/)?$"
    },
    {
      "page": "/contact",
      "regex": "^/contact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact(?:/)?$"
    },
    {
      "page": "/faq",
      "regex": "^/faq(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/faq(?:/)?$"
    },
    {
      "page": "/furniture-catalog",
      "regex": "^/furniture\\-catalog(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/furniture\\-catalog(?:/)?$"
    },
    {
      "page": "/interior-design",
      "regex": "^/interior\\-design(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/interior\\-design(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}